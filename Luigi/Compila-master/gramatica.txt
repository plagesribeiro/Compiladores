THE ULTIMATE

S 		-> {D}+{C}+
D 		-> VAR {(integer | char) id [D'] ';'}+ | CONST id( = CONSTV' | '['num']' = '"' string '"') ';'
D' 		-> [= CONSTV]{,id[ = CONSTV | '['num']']} | '['num']'{,id[ = CONSTV | '['num']']}
CONSTV 	-> 0x(hexa)(hexa) | char | E
CONSTV' -> 0x(hexa)(hexa) | char | [-] num
C		-> id C' ';'| FOR id = E to E [step constante] do C'' | if E then C''' | ';' | readln'('id ['[' E ']']')'';' | write'('E{,E}')'';' | writeln'('E{,E}')'';'
C'		-> = E | '['E']' = E 
C''		-> C | '{' {C} '}'
C'''	-> C [else ('{' {C} '}' || C)] | '{' {C} '}' [else ('{' {C} '}' || C)] 
E		-> E' {('<' | '>' | '<=' | '>=' | '<>' | '=') E'}
E'		-> [+ | -] E'' {('+' | '-' | or ) E''}
E''		-> F {('*' | '/' | '%' | and) F}
F		-> '(' E ')' | not F | id ['[' E ']']| num

%%%%%%%%%%% RASCUNHO %%%%%%%%%%%

S 		-> {D}{C}+
D 		-> VAR (integer | char) id [D'] ';' | Const id = CONSTV ';'
D' 		-> ,id['['num']']{,id['['num']']} | = [+ | -] num | '['num']'
CONSTV 	-> 0x(hexa)(hexa) | char | '"' string '"' | [+ | -] num
C		-> id C' ';'| FOR id = E to E [step num] do C'' | if E then C''' | ';' | readln'('id')'';' | write'('E{,E}')'';' | writeln'('E{,E}')'';'
C'		-> = E | '['E']' = E 
C''		-> C | '{' {C} '}'
C'''	-> C [else ('{' {C} '}' || C)] | '{' {C} '}' [else ('{' {C} '}' || C)] 
E		-> E' {('<' | '>' | '<=' | '>=' | '<>' | '=') E'}
E'		-> [+ | -] E'' {('+' | '-' | or ) E''}
E''		-> F {('*' | '/' | '%' | and) F}
F		-> '(' E ')' | not F | id | num



NOVA


S 		-> VAR {D}+ [CONST T]{C}+
D 		-> (integer | char) id {D'} ';'
D' 		-> ,id[ A |'['num']']{,id[ A | '['num']']} | A | '['num']'
A		-> = CONSTV
CONSTV 	-> 0x(hexa)(hexa) | char | E
CONSTV' -> 0x(hexa)(hexa) | char | [-] num
T		-> id = CONSTV' ';'
C		-> id C' ';'| FOR id = E to E [step num] do C'' | if E then C''' | ';' | readln'('id')'';' | write'('E{,E}')'';' | writeln'('E{,E}')'';'
C'		-> = E | '['E']' = E 
C''		-> C | '{' {C} '}'
C'''	-> C [else ('{' {C} '}' || C)] | '{' {C} '}' [else ('{' {C} '}' || C)] 
E		-> E' {('<' | '>' | '<=' | '>=' | '<>' | '=') E'}
E'		-> [+ | -] E'' {('+' | '-' | or ) E''}
E''		-> F {('*' | '/' | '%' | and) F}
F		-> '(' E ')' | not F | id | num | (rever > ) '[' E ']'


NOVA 2

S 		-> VAR {D}+ [CONST T]{C}+
D 		-> (integer | char) id [D'] ';'
D' 		-> A[,id[ A |'['num']']{,id[ A | '['num']']}] | '['num']'[,id[ A |'['num']']{,id[ A | '['num']']}]
A		-> = CONSTV
CONSTV 	-> 0x(hexa)(hexa) | char | E
CONSTV' -> 0x(hexa)(hexa) | char | [-] num
T		-> id = CONSTV' ';'
C		-> id C' ';'| FOR id = E to E [step num] do C'' | if E then C''' | ';' | readln'('id')'';' | write'('E{,E}')'';' | writeln'('E{,E}')'';'
C'		-> = E | '['E']' = E 
C''		-> C | '{' {C} '}'
C'''	-> C [else ('{' {C} '}' || C)] | '{' {C} '}' [else ('{' {C} '}' || C)] 
E		-> E' {('<' | '>' | '<=' | '>=' | '<>' | '=') E'}
E'		-> [+ | -] E'' {('+' | '-' | or ) E''}
E''		-> F {('*' | '/' | '%' | and) F}
F		-> '(' E ')' | not F | id ['[' E ']']| num
